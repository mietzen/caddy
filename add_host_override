#!/bin/sh
set -e
set -o pipefail

opnsense_hostname="$1"
domain="$2"
caddy_server_ip="$3"

log() {
    local ts level script
    level="$1"
    shift
    ts=$(date +"%y-%m-%d %H:%M:%S")
    script=$(basename "$0")
    echo "[$ts][$script][$level] $*"
}

# Validate input
if [ -z "$opnsense_hostname" ] || [ -z "$domain" ] || [ -z "$caddy_server_ip" ]; then
    echo "Usage: $0 <opnsense_hostname> <domain> <caddy_server_ip>" >&2
    [ -z "$opnsense_hostname" ] && echo "Error: <opnsense_hostname> is missing" >&2
    [ -z "$domain" ] && echo "Error: <domain> is missing" >&2
    [ -z "$caddy_server_ip" ] && echo "Error: <caddy_server_ip> is missing" >&2
    exit 1
fi

if [ -z "$OPNSENSE_API_KEY" ] || [ -z "$OPNSENSE_API_SECRET" ]; then
    log ERROR "Missing environment variable:" >&2
    [ -z "$OPNSENSE_API_KEY" ] && log ERROR "Error: OPNSENSE_API_KEY is missing" >&2
    [ -z "$OPNSENSE_API_SECRET" ] && log ERROR "Error: OPNSENSE_API_SECRET is missing" >&2
    exit 1
fi

if [ "$domain" = "${domain#*.}" ]; then
    log ERROR "Error: domain must contain a dot" >&2
    exit 1
fi

# Check record type (IPv4 = A, IPv6 = AAAA)
check_record_type() {
    if echo "$1" | grep -Eq '^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}$'; then
        echo "A"
        return 0
    fi
    if echo "$1" | grep -Eq '^(([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{0,4}|::1)$'; then
        echo "AAAA"
        return 0
    fi
    return 1
}

if ! check_record_type "$caddy_server_ip" &> /dev/null; then
    log ERROR "Error: <caddy_server_ip> must be a valid IPv4 or IPv6 address" >&2
    log ERROR "Got: $caddy_server_ip" >&2
    exit 1
fi

record_type=$(check_record_type "$caddy_server_ip")

# Parse domain components
override_host="${domain%%.*}"
override_domain="${domain#*.}"

# Set insecure flag if needed
insecure=""
if [ "$(printf '%s' "$OPNSENSE_INSECURE" | tr '[:upper:]' '[:lower:]')" = "true" ]; then
    insecure="-k"
fi

# Base URL for API calls
base_url="https://${opnsense_hostname}/api/unbound/"
auth_params="-u ${OPNSENSE_API_KEY}:${OPNSENSE_API_SECRET}"

# Function to call OPNsense Unbound API
opnsense_unbound_api() {
    local endpoint="$1"
    local payload="$2"
    local response
    local exit_code

    if [ -n "$payload" ]; then
        response=$(curl -sS -X POST $insecure \
            $auth_params \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "$base_url/$endpoint" 2>&1)
        exit_code=$?
    else
        response=$(curl -sS -X POST $insecure \
            $auth_params \
            "$base_url/$endpoint" 2>&1)
        exit_code=$?
    fi

    if [ $exit_code -ne 0 ]; then
        if echo "$response" | grep -qi "self-signed certificate"; then
            log ERROR "Error: Failed to connect due to an self-signed SSL certificate." >&2
            log ERROR "Hint: If you are using a self-signed certificate, set OPNSENSE_INSECURE=true" >&2
        else
            log ERROR "Error: curl failed with exit code $exit_code" >&2
            log ERROR "$response" >&2
        fi
        return 1
    fi

    printf '%s\n' "$response"
}

log INFO "Managing host override for: $override_host.$override_domain -> $caddy_server_ip"

# Build JSON payload
json_payload='{
    "host": {
        "enabled": "1",
        "hostname": "'"$override_host"'",
        "domain": "'"$override_domain"'",
        "rr": "'"$record_type"'",
        "mxprio": "",
        "mx": "",
        "server": "'"$caddy_server_ip"'",
        "description": "Generated by Caddy"
    }
}'

# Query existing overrides
log INFO "Checking for existing overrides..."
overrides_json=$(opnsense_unbound_api "settings/search_host_override")

# Look for matching hostname + domain
match=$(printf '%s' "$overrides_json" | jq -r \
    --arg h "$override_host" \
    --arg d "$override_domain" \
    '.rows[] | select(.hostname == $h and .domain == $d)')

if [ -n "$match" ]; then
    uuid=$(printf '%s' "$match" | jq -r '.uuid')
    current_server=$(printf '%s' "$match" | jq -r '.server')
    current_desc=$(printf '%s' "$match" | jq -r '.description')
    current_enabled=$(printf '%s' "$match" | jq -r '.enabled')
    current_rr=$(printf '%s' "$match" | jq -r '.rr ' | cut -f1 -d' ')
    current_mxprio=$(printf '%s' "$match" | jq -r '.mxprio')
    current_mx=$(printf '%s' "$match" | jq -r '.mx')

    # Check if existing override is fully identical
    if [ "$current_enabled" = "1" ] && \
       [ "$current_server" = "$caddy_server_ip" ] && \
       [ "$current_desc" = "Generated by Caddy" ] && \
       [ "$current_rr" = "$record_type" ] && \
       [ "$current_mxprio" = "" ] && \
       [ "$current_mx" = "" ]; then
        log INFO "Host override already exists and is identical"
        exit 0
    else
        log INFO "Host override exists but differs:"
        log INFO "  Current: enabled=$current_enabled, server=$current_server, rr=$current_rr, mxprio='$current_mxprio', mx='$current_mx', desc=$current_desc"
        log INFO "  Desired: enabled=1, server=$caddy_server_ip, rr=A, mxprio='', mx='', desc=Generated by Caddy"
        log INFO "Deleting old entry..."

        delete_result=$(opnsense_unbound_api "settings/del_host_override/${uuid}")
        if [ "$(printf '%s' "$delete_result" | jq -r '.result')" = "deleted" ]; then
            log INFO "Old entry deleted successfully"
        else
            log ERROR "Error: Failed to delete old entry. API response: $delete_result" >&2
            exit 1
        fi
    fi
    else
    log INFO "Host override does not exist yet"
fi

# Create new host override
log INFO "Creating new host override..."

add_result=$(opnsense_unbound_api "settings/add_host_override" "$json_payload")

if [ "$(printf '%s' "$add_result" | jq -r '.result')" = "saved" ]; then
    log INFO "Host override created successfully"
else
    log ERROR "Error: Failed to add host override entry. API response: $add_result" >&2
    exit 1
fi

log INFO "Reloading config..."
reconfigure_result=$(opnsense_unbound_api "service/reconfigure")

if [ "$(printf '%s' "$reconfigure_result" | jq -r '.status')" = "ok" ]; then
    log INFO "Config reloaded successfully"
else
    log ERROR "Error: Failed to reload config. API response: $reconfigure_result" >&2
    exit 1
fi
